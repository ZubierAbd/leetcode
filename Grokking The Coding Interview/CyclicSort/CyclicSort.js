// We are given an array containing n objects. Each object, when created, was assigned a unique number from the range 1 to n based on their creation sequence. This means that the object with sequence number 3 was created just before the object with sequence number 4.

// Write a function to sort the objects in-place on their creation sequence number in O(n)O(n)O(n) and without using any extra space. For simplicity, letâ€™s assume we are passed an integer array containing only the sequence numbers, though each number is actually an object.


//Soln the input array contains numbers from the range 1 to n. 


function cyclic_sort(nums) {
    let i = 0;
    while (i < nums.length) {
        const j = nums[i] - 1;
        if (nums[i] !== nums[j]) {
            [nums[i], nums[j]] = [nums[j], nums[i]]
        } else {
            i += 1;
        }
    }

    return nums;
}


console.log(cyclic_sort([4, 3, 2, 5, 1]))